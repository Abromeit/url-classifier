package com.mikesamuel.url;

import static org.junit.Assert.assertEquals;

import java.net.URISyntaxException;

import org.junit.Test;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

@SuppressWarnings({ "javadoc", "static-method" })
public final class AuthorityPredicateTest {

  private static void assertAuthority(
      Classification want,
      String input,
      AuthorityPredicateBuilder b)
  throws URISyntaxException {
    Classification got = b.build().apply(new URLInput(input));
    assertEquals(input, want, got);
  }



  private static void runCommonTestsWith(
      AuthorityPredicate p,
      URLContext context,
      String... shouldMatch)
  throws URISyntaxException {
    ImmutableSet<String> matchSet = ImmutableSet.copyOf(shouldMatch);
    for (String url : MAY_MATCH) {
      assertEquals(
          url,

          matchSet.contains(url)
          ? Classification.MATCH
          : Classification.NOT_A_MATCH,

          p.apply(new URLInput(context, url)));
    }
    for (String url : MUST_BE_INVALID) {
      assertEquals(
          url,
          Classification.INVALID,
          p.apply(new URLInput(context, url)));
    }
    for (String url : matchSet) {
      assertEquals(
          url,
          Classification.MATCH,
          p.apply(new URLInput(context, url)));
    }
  }

  private static final ImmutableList<String> MAY_MATCH = ImmutableList.of(
      );

  private static final ImmutableList<String> MUST_BE_INVALID = ImmutableList.of(
      );


  @Test
  public void testUnconfiguredPredicate() throws Exception {
    AuthorityPredicateBuilder b = AuthorityPredicateBuilder.builder();
    assertAuthority(
        Classification.NOT_A_MATCH,
        "/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://example/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://ex ample/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "htTpS://example/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "//example.com/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "/foo",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "bar",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "./bar",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "blob:https://example.com/uuid",
        b);
    assertAuthority(
        Classification.INVALID,
        "blob:file:///uuid",  // No authority.
        b);
    assertAuthority(
        Classification.INVALID,
        "http:///",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://@/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://foo@/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://%@example.com/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://example.com:@/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://:/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://foo.com:80/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://foo.com:/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://foo.com:65535/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://foo.com:65536/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://foo.com:0/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://foo.com:1/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://example.com:80/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://[3ffe:0:0:0:0:0:0:1]/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://3ffe:0:0:0:0:0:0:1/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://192.168.999.888/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://192.168.1.1/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://192.168.1.1:1/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://192.168.1.1.1/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http:///",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://loc%61lhost/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://loc%6lhost/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://loc%lhost/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://loc%lhost/",
        b);
    assertAuthority(
        Classification.NOT_A_MATCH,
        "http://locahos%74/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://locahos%7/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://locahos%7",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://locahos%",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://locahos%/",
        b);
    assertAuthority(
        Classification.INVALID,
        "http://locahos%c0%80/",  // Non-minimal encoding
        b);
  }

}
